{"version":3,"sources":["api/api.ts","redux/todo/todoReducer.ts","components/Todo/ReduxForm/ReduxForm.js","components/Todo/Note/Note.tsx","components/Todo/Todo.tsx","components/Todo/TodoContainer.tsx","App.tsx","reportWebVitals.js","redux/rootReducer.ts","redux/store.ts","index.tsx"],"names":["url","fetchNotes","a","axios","get","result","payload","Object","keys","data","map","key","id","postNotes","title","note","date","Date","toJSON","post","name","Error","messages","deleteNotes","delete","GET_NOTES","ADD_NOTE","DELETE_NOTE","initialState","notes","addNote","type","newMessage","deleteNote","todoReducer","state","action","filter","ReduxForm","reduxForm","form","props","onSubmit","handleSubmit","className","Field","component","placeholder","required","Note","onClick","Todo","useEffect","uploadNotes","formData","newNote","message","TodoContainer","useSelector","todoList","dispatch","useDispatch","newNoteText","deleteUsersTC","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleWere","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3b4cc8b4.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst url = 'https://react-hooks-example-88ef0-default-rtdb.firebaseio.com';\r\n\r\nexport const fetchNotes = async () => {\r\n\r\n    const result = await axios.get(`${url}/notes.json`)\r\n    const payload = Object.keys(result.data).map(key => {\r\n        return {\r\n            ...result.data[key],\r\n            id: key\r\n        }\r\n    })\r\n    return payload\r\n}\r\n\r\nexport const postNotes = async (title: string) => {\r\n    const note = {\r\n        title, date: new Date().toJSON()\r\n    }\r\n    try {\r\n        const result = await axios.post(`${url}/notes.json`, note)\r\n        const payload = {\r\n            ...note,\r\n            id: result.data.name\r\n        }\r\n        return payload\r\n    } catch (e) {\r\n        throw new Error(e.messages)\r\n    }\r\n}\r\n\r\nexport const deleteNotes = async (id: string) => {\r\n    await axios.delete(`${url}/notes/${id}.json `)\r\n}","import {deleteNotes, fetchNotes, postNotes} from \"../../api/api\";\r\nimport {SystemState} from \"../../types/types\";\r\n\r\n// Const\r\nconst GET_NOTES = 'todo/GET_NOTES'\r\nconst ADD_NOTE = 'todo/ADD_NOTE'\r\nconst DELETE_NOTE = 'todo/DELETE_NOTE'\r\n\r\nlet initialState: SystemState = {\r\n    notes: []\r\n};\r\n\r\n//Reducer\r\nconst todoReducer = (state = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case GET_NOTES:\r\n            return {\r\n                ...state,\r\n                notes: [...state.notes, ...action.notes]\r\n            }\r\n        case ADD_NOTE:\r\n\r\n            return {\r\n                ...state,\r\n                notes: [...state.notes, {\r\n                    ...action.newMessage\r\n                }]\r\n            }\r\n        case DELETE_NOTE:\r\n            return {\r\n                ...state,\r\n                notes: state.notes.filter(note => note.title !== action.title)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const getNotes = (notes: any) => ({\r\n    type: GET_NOTES,\r\n    notes\r\n})\r\nexport const addNote = (title: any) => ({\r\n    type: ADD_NOTE,\r\n    newMessage: title\r\n})\r\nexport const deleteNote = (title: any) => ({\r\n    type: DELETE_NOTE,\r\n    title\r\n})\r\n// Redux Thunk Creator\r\nexport const getUsersTC = () => async (dispatch: any) => {\r\n    const payload = await fetchNotes()\r\n    dispatch(getNotes(payload));\r\n}\r\nexport const postUsersTC = (title: any) => async (dispatch: any) => {\r\n    const payload = await postNotes(title)\r\n    dispatch(addNote(payload));\r\n}\r\nexport const deleteUsersTC = (id: any, title: any) => async (dispatch: any) => {\r\n    await deleteNotes(id)\r\n    dispatch(deleteNote(title));\r\n}\r\n\r\n\r\n\r\nexport default todoReducer;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\n// reduxForm\r\nconst PostForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className=\"input-group mb-3\">\r\n                <Field\r\n                    name=\"message\"\r\n                    component=\"input\"\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Write something\"\r\n                    required/>\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-primary\">Submit</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\n// Redux Form\r\nexport const ReduxForm = reduxForm({\r\n    form: 'PostForm'\r\n})(PostForm);","import React from \"react\";\r\nimport {TodoListProps} from \"../../../types/types\";\r\n\r\nexport const Note: React.FC<TodoListProps> = (props) => {\r\n\r\n    return (\r\n        <ul className=\"list-group\">\r\n        {props.notes.map((note) => {\r\n            return (\r\n                <li className=\"list-group-item note\" id={note.id} key={note.title}>\r\n                    <span>{note.title}</span>\r\n                    <button className=\"btn btn-outline-danger\" onClick={() => props.deleteNote(note.id, note.title)}>x</button>\r\n                </li>\r\n            )\r\n        })}\r\n    </ul>\r\n)\r\n}","import React, {useEffect} from 'react';\r\nimport {ReduxForm} from \"./ReduxForm/ReduxForm\";\r\nimport {Note} from \"./Note/Note\";\r\nimport {TodoListProps} from \"../../types/types\";\r\n\r\n\r\nexport const Todo: React.FC<TodoListProps> = (props) => {\r\n    // useEffect\r\n    useEffect(() => {\r\n        props.uploadNotes()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // Redux Form Callback\r\n    let onSubmit = (formData: any) => {\r\n        props.newNote(formData.message);\r\n        formData.message = '';\r\n    }\r\n\r\n    return (\r\n        <div className={`row`}>\r\n            <div className={`col-12`}>\r\n                <ReduxForm onSubmit={onSubmit}/>\r\n                <hr/>\r\n                <Note {...props}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteUsersTC, getUsersTC, postUsersTC} from \"../../redux/todo/todoReducer\";\r\nimport {Todo} from \"./Todo\";\r\n\r\nexport const TodoContainer: React.FC = () => {\r\n    // useSelector\r\n    const notes = useSelector((state: any) => state.todoList.notes );\r\n    // useDispatch\r\n    const dispatch = useDispatch();\r\n    const uploadNotes = () => {dispatch(getUsersTC())}\r\n    const newNote = (newNoteText: string) => {dispatch(postUsersTC(newNoteText))}\r\n    const deleteNote = (id: string, title: string) => {dispatch(deleteUsersTC(id, title))}\r\n\r\n    return (\r\n        <Todo\r\n            notes={notes}\r\n            newNote={newNote}\r\n            uploadNotes={uploadNotes}\r\n            deleteNote={deleteNote}/>\r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport {TodoContainer} from \"./components/Todo/TodoContainer\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App container\">\n        <TodoContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers} from \"redux\";\r\nimport todoReducer from \"./todo/todoReducer\";\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nconst rootReducer = combineReducers({\r\n    todoList: todoReducer,\r\n    form: formReducer\r\n})\r\n\r\nexport default rootReducer;","import {applyMiddleware, createStore} from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport thunkMiddleWere from \"redux-thunk\";\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleWere));\r\n\r\n// console.log(store.getState())\r\n// window.store = store;\r\n\r\nexport default store;","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}